# m_load_kernel
# load kernel image & device tree binary
#
# global varable
# - file name (`kernel`): _StringValue_
# - file name (`fdt`): _StringValue_
#
# input Parameter
# - storage class (`p_class`): mmc, usb, sata
# - storage device (`p_device`): _HexValue_
# - name prefix (`p_prefix`): _StringValue_
#
# return value
# - true: success / false: error
if test -d fdt; then
  v_success=false;
  for v_fdt in ${fdt}; do
    if test ${v_success} = false; then
      p_filename=${p_prefix}/${p_conf}/${Ã®v_fdt};
      p_loadaddr=${fdt_addr};
      if run m_load; then
        if test ${dbglevel} > 0; then
          echo Device Tree loaded from ${p_class}:${p_device}:${p_filename}, size ${filesize};
        fi;
        v_success=true;
      else
        if test ${errlevel} > 0; then
          echo Loading device tree from ${p_class}:${p_device}:${p_filename} failed!;
        fi;
        v_success=false;
      fi;
    fi;
  done;
  if test ${v_success} = false; then
    setenv fdt_addr "-";
  fi;
fi;
p_filename=${p_prefix}/${p_conf}/${kernel};
p_loadaddr=${krnl_addr};
if run m_load; then
  if test ${dbglevel} > 0; then
    echo Kernel image loaded from ${p_class}:${p_device}:${p_filename}, size ${filesize};
  fi;
  true;
else
  if test ${errlevel} > 0; then
    echo Loading kernel image from ${p_class}:${p_device}:${p_filename} failed!;
  fi;
  false;  
fi;
# vim:ft=sh
